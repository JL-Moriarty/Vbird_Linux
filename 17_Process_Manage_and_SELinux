## 直接将命令放到后台执行 &

直接在执行的命令最后加上&符号即可

应注意的是，这里说的“后台”只是bash的后台，并不是系统后台。所以如果是使用远程登录，而退出远程登录后，这个命令是会被中断的
---------------------------------------
## 将目前的工作放入后台，默认处于暂停状态 Ctrl+z

例如在vim编辑的时候，直接按下ctrl+z即可把vim放到后台

---------------------------------------
## 查看目前的后台工作 jobs

jobs [-lrs]

-l 除了列出后台job number与命令串之外，同时列出PID
-r 仅列出正在后台run的工作
-s 仅列出正在后台暂停的工作


---------------------------------------
## 将后台工作拿到前台 fg

fg %jobnumber

---------------------------------------
## 让后台工作的状态变成进行中 bg

---------------------------------------
## 结束进程 kill

kill -signal %jobnumber
kill -l

-l  列出目前kill能够使用的信号有哪些
signal 表示给予后面接的工作什么样的指示，可用man 7 signal查阅
-1  重新读取一次参数的配置文件
-2  代表与键盘输入ctrl+c同样的操作
-9  立即强制删除一个工作
-15 以正常的程序方式终止一个工作

---------------------------------------
## 17.2.3 脱机管理 nohup

亦即使用户可以在退出登录后，依然可以让系统继续执行自己的命令。与at和crontab具有同样的效果

nohup [命令与参数]    在前台工作
nohup [命令与参数] &  在后台工作


---------------------------------------
## 17.3.1 进程的查看

1) ps

ps aux 查看系统所有的进程数据
ps -lA 查看系统所有的进程数据
ps axjf 连同部分进程树状态

-A 所有的进程均显示出来，与-e具有同样的作用
-a 不与terminal有关的所有进程
-u 有效用户相关的进程
x  通常与a连用，可列出较完整信息
l  较长、较详细地将该PID的信息列出
j  工作的格式
-f 做一个更为完整的输出

2) top

动态查看进程的变化

top [d 数字] | top [-bnp]

-d 后接秒数，表示多少秒更新一次。默认为5
-b 以批次的方式执行top
-n 与-b搭配，表示需要进行几次top输出结果
-p 指定某个PID进行查看监测

在top执行过程中可以使用的按键命令：
? 显示帮助
P 以CPU的使用资源排序
M 以内存的使用资源排序
N 以PID排序
T 由该进程的CPU时间累积排序
k 给予某个PID一个信号
r 给予某个PID重新制定一个nice值
q 离开top

3) pstree

查看进程树

pstree [-A|U] [-up]

-A 各进程之间的连接以ASCII字符来连接
-U 各进程宰的连接以UTF8码的字符来连接
-p 同时列出每个进程的PID
-u 同时列出每个进程的所属账号名称

--------------------------------------------------------------------------

## 17.3.2 进程的管理

使用kill -l可以查看可使用的信号。给进程发送信号可以使进程进行相应的各种动作
常见的信号有：

 代号 |  名称  |  内容
------|--------|----------------------------------------------------------------------
  1   | SIGHUP | 启动被终止的进程，可让该PID重新读取自己的配置文件，类似重新启动
  2   | SIGINT | 相当于用键盘输入ctrl+c来中断进程的运行
  9   | SIGKILL| 表示强制中断一个进程的进行
  15  | SIGTERM| 以正常的结束进程方式来终止该进程
  17  | SIGSTOP| 相当于用键盘输入ctrl+z来暂停一个进程

--------------------------------------------------------------------------
## 调整进程优先级

这个nice的值是给系统一个参考，系统会结合系统均衡和这个nice值为动态决定最终的优先级

1) nice 

用于在执行程序时指定的nice值

nice [-n 数字] command

2) renice

用于给已存在的进程调整nice值

renice [number] PID

--------------------------------------------------------------------------
## 17.3.4 系统资源查看

1) free 
查看内存使用情况

free [-b|-k|-m|-g] [-t]

-b 直接输入free时，显示的单位是KB。可使用b for Bytes, m for MB, k for KB, g for GB
-t 在输出的最终结果中显示物理内存与swap的总量

2) uname

查看系统与内核相关信息

uname [-asrmpi]

-a 所有与系统相关的信息，包括下面的所有信息
-s 系统内核名称
-r 内核版本
-m 系统的硬件名称
-p CPU的类型，与-m类似，只是显示的是CPU的类型
-i 硬件的平台

3) uptime

查看系统启动时间与工作负载

4) netstat

跟踪网络

netstat [-atunlp]

-a 将目前系统上所有连接、监听、Socket数据都列出来
-t 列出tcp网络数据包的数据
-u 列出udp网络数据包的数据
-n 不列出进程的服务名称，以端口号来显示
-l 列出目前正在网络监听的服务
-p 列出该网络服务的进程PID

5) dmesg

分析内核产生的信息

6) vmstat

检测系统资源变化

vmstat [-a] [延迟 [总检测次数]]   <== CPU/内存等信息
vmstat [-fs]                      <== 内存相关
vmstat [-S 单位]                  <== 设置显示数据的单位
vmstat [-d]                       <== 与磁盘有关
vmstat [-p 分区]                  <== 与磁盘有关

-a 使用inactive/active替代buffer/cache的内存输出信息
-f 开机到目前为止系统复制的进程数
-s 将一些事件（开机到目前为止）导致的内存变化情况列表说明
-S 后接单位
-d 列出磁盘的读写统计表
-p 后接分区，可显示该分区的读写总量统计表

--------------------------------------------------------------------------------------------------------
## 17.4.3 查询已打开文件或已执行程序打开的文件

1) fuser 通过文件或文件系统找出正在使用该文件的程序

fuser [-umv] [k [i] [-signal]] file/dir

-u 除了进程的PID之外，同时列出该进程的所有者
-m 后面接的那个文件名会主动上提到该文件系统的顶层，对umount不成功很有效
-v 列出每个文件与程序还有命令的完整相关性
-k 找出使用该文件/目录的PID，并试图以SIGKILL这个信号给予该PID
-i 必须与-k配合，在删除PID之前会先询问用户意愿
-signal  例如-1 -15 等，若不加的话，默认是SIGKILL (-9) 

2) lsof 列出被进程所打开的文件名

lsof [-aUu] [+d]

-a 多项数据需要“同时成立”才显示出结果
-U 仅列出Unix like系统的socket文件类型
-u 后接username，列出该用户相关进程所打开的文件
+d 后面接目录，即找出某个目录下面已经被打开的文件

3) pidof 找出某个正在执行的进程的PID

pidof [-sx] program_name

-s 仅列出一个PID而不列出所有的PID
-x 同时列出该program name可能的PPID那个进程的PID
3) pidof 找出某个正在执行的进程的PID

